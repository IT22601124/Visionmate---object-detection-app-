{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: true,\n  _DEFAULT_INITIAL_PLAYBACK_STATUS: true,\n  getNativeSourceFromSource: true,\n  assertStatusValuesInBounds: true,\n  getNativeSourceAndFullInitialStatusForLoadAsync: true,\n  getUnloadedStatus: true,\n  PlaybackMixin: true\n};\nexports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = exports.PlaybackMixin = void 0;\nexports.assertStatusValuesInBounds = assertStatusValuesInBounds;\nexports.getNativeSourceAndFullInitialStatusForLoadAsync = getNativeSourceAndFullInitialStatusForLoadAsync;\nexports.getNativeSourceFromSource = getNativeSourceFromSource;\nexports.getUnloadedStatus = getUnloadedStatus;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoAsset = require(\"expo-asset\");\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _AV = require(\"./AV.types\");\nObject.keys(_AV).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _AV[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _AV[key];\n    }\n  });\n});\nvar _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = exports._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;\nvar _DEFAULT_INITIAL_PLAYBACK_STATUS = exports._DEFAULT_INITIAL_PLAYBACK_STATUS = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  audioPan: 0,\n  isMuted: false,\n  isLooping: false\n};\nfunction getNativeSourceFromSource(source) {\n  var uri = null;\n  var overridingExtension = null;\n  var headers;\n  if (typeof source === 'string' && _expoModulesCore.Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension: overridingExtension,\n      headers: headers\n    };\n  }\n  var asset = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {\n    uri = source.uri;\n  }\n  if (uri == null) {\n    return null;\n  }\n  if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n  if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {\n    headers = source.headers;\n  }\n  return {\n    uri: uri,\n    overridingExtension: overridingExtension,\n    headers: headers\n  };\n}\nfunction _getAssetFromPlaybackSource(source) {\n  if (source == null) {\n    return null;\n  }\n  var asset = null;\n  if (typeof source === 'number') {\n    asset = _expoAsset.Asset.fromModule(source);\n  } else if (source instanceof _expoAsset.Asset) {\n    asset = source;\n  }\n  return asset;\n}\nfunction assertStatusValuesInBounds(status) {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n  if (typeof status.audioPan === 'number' && (status.audioPan < -1 || status.audioPan > 1)) {\n    throw new RangeError('Pan value must be between -1.0 and 1.0');\n  }\n}\nfunction getNativeSourceAndFullInitialStatusForLoadAsync(_x, _x2, _x3) {\n  return _getNativeSourceAndFullInitialStatusForLoadAsync.apply(this, arguments);\n}\nfunction _getNativeSourceAndFullInitialStatusForLoadAsync() {\n  _getNativeSourceAndFullInitialStatusForLoadAsync = (0, _asyncToGenerator2.default)(function* (source, initialStatus, downloadFirst) {\n    var fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : Object.assign({}, _DEFAULT_INITIAL_PLAYBACK_STATUS, initialStatus);\n    assertStatusValuesInBounds(fullInitialStatus);\n    if (typeof source === 'string' && _expoModulesCore.Platform.OS === 'web') {\n      return {\n        nativeSource: {\n          uri: source,\n          overridingExtension: null\n        },\n        fullInitialStatus: fullInitialStatus\n      };\n    }\n    var asset = _getAssetFromPlaybackSource(source);\n    if (downloadFirst && asset) {\n      yield asset.downloadAsync();\n    }\n    var nativeSource = getNativeSourceFromSource(source);\n    if (nativeSource === null) {\n      throw new Error(`Cannot load an AV asset from a null playback source`);\n    }\n    if (asset && asset.localUri) {\n      nativeSource.uri = asset.localUri;\n    }\n    return {\n      nativeSource: nativeSource,\n      fullInitialStatus: fullInitialStatus\n    };\n  });\n  return _getNativeSourceAndFullInitialStatusForLoadAsync.apply(this, arguments);\n}\nfunction getUnloadedStatus() {\n  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return Object.assign({\n    isLoaded: false\n  }, error ? {\n    error: error\n  } : null);\n}\nvar PlaybackMixin = exports.PlaybackMixin = {\n  playAsync: function () {\n    var _playAsync = (0, _asyncToGenerator2.default)(function* () {\n      return this.setStatusAsync({\n        shouldPlay: true\n      });\n    });\n    function playAsync() {\n      return _playAsync.apply(this, arguments);\n    }\n    return playAsync;\n  }(),\n  playFromPositionAsync: function () {\n    var _playFromPositionAsync = (0, _asyncToGenerator2.default)(function* (positionMillis) {\n      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.setStatusAsync({\n        positionMillis: positionMillis,\n        shouldPlay: true,\n        seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n        seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n      });\n    });\n    function playFromPositionAsync(_x4) {\n      return _playFromPositionAsync.apply(this, arguments);\n    }\n    return playFromPositionAsync;\n  }(),\n  pauseAsync: function () {\n    var _pauseAsync = (0, _asyncToGenerator2.default)(function* () {\n      return this.setStatusAsync({\n        shouldPlay: false\n      });\n    });\n    function pauseAsync() {\n      return _pauseAsync.apply(this, arguments);\n    }\n    return pauseAsync;\n  }(),\n  stopAsync: function () {\n    var _stopAsync = (0, _asyncToGenerator2.default)(function* () {\n      return this.setStatusAsync({\n        positionMillis: 0,\n        shouldPlay: false\n      });\n    });\n    function stopAsync() {\n      return _stopAsync.apply(this, arguments);\n    }\n    return stopAsync;\n  }(),\n  setPositionAsync: function () {\n    var _setPositionAsync = (0, _asyncToGenerator2.default)(function* (positionMillis) {\n      var tolerances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.setStatusAsync({\n        positionMillis: positionMillis,\n        seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n        seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n      });\n    });\n    function setPositionAsync(_x5) {\n      return _setPositionAsync.apply(this, arguments);\n    }\n    return setPositionAsync;\n  }(),\n  setRateAsync: function () {\n    var _setRateAsync = (0, _asyncToGenerator2.default)(function* (rate) {\n      var shouldCorrectPitch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var pitchCorrectionQuality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _AV.PitchCorrectionQuality.Medium;\n      return this.setStatusAsync({\n        rate: rate,\n        shouldCorrectPitch: shouldCorrectPitch,\n        pitchCorrectionQuality: pitchCorrectionQuality\n      });\n    });\n    function setRateAsync(_x6) {\n      return _setRateAsync.apply(this, arguments);\n    }\n    return setRateAsync;\n  }(),\n  setVolumeAsync: function () {\n    var _setVolumeAsync = (0, _asyncToGenerator2.default)(function* (volume, audioPan) {\n      return this.setStatusAsync({\n        volume: volume,\n        audioPan: audioPan\n      });\n    });\n    function setVolumeAsync(_x7, _x8) {\n      return _setVolumeAsync.apply(this, arguments);\n    }\n    return setVolumeAsync;\n  }(),\n  setIsMutedAsync: function () {\n    var _setIsMutedAsync = (0, _asyncToGenerator2.default)(function* (isMuted) {\n      return this.setStatusAsync({\n        isMuted: isMuted\n      });\n    });\n    function setIsMutedAsync(_x9) {\n      return _setIsMutedAsync.apply(this, arguments);\n    }\n    return setIsMutedAsync;\n  }(),\n  setIsLoopingAsync: function () {\n    var _setIsLoopingAsync = (0, _asyncToGenerator2.default)(function* (isLooping) {\n      return this.setStatusAsync({\n        isLooping: isLooping\n      });\n    });\n    function setIsLoopingAsync(_x10) {\n      return _setIsLoopingAsync.apply(this, arguments);\n    }\n    return setIsLoopingAsync;\n  }(),\n  setProgressUpdateIntervalAsync: function () {\n    var _setProgressUpdateIntervalAsync = (0, _asyncToGenerator2.default)(function* (progressUpdateIntervalMillis) {\n      return this.setStatusAsync({\n        progressUpdateIntervalMillis: progressUpdateIntervalMillis\n      });\n    });\n    function setProgressUpdateIntervalAsync(_x11) {\n      return _setProgressUpdateIntervalAsync.apply(this, arguments);\n    }\n    return setProgressUpdateIntervalAsync;\n  }()\n};","map":{"version":3,"names":["_expoAsset","require","_expoModulesCore","_AV","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_DEFAULT_INITIAL_PLAYBACK_STATUS","positionMillis","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","audioPan","isMuted","isLooping","getNativeSourceFromSource","source","uri","overridingExtension","headers","Platform","OS","asset","_getAssetFromPlaybackSource","localUri","overrideFileExtensionAndroid","Asset","fromModule","assertStatusValuesInBounds","status","RangeError","getNativeSourceAndFullInitialStatusForLoadAsync","_x","_x2","_x3","_getNativeSourceAndFullInitialStatusForLoadAsync","apply","arguments","_asyncToGenerator2","default","initialStatus","downloadFirst","fullInitialStatus","assign","nativeSource","downloadAsync","Error","getUnloadedStatus","error","length","undefined","isLoaded","PlaybackMixin","playAsync","_playAsync","setStatusAsync","playFromPositionAsync","_playFromPositionAsync","tolerances","seekMillisToleranceAfter","toleranceMillisAfter","seekMillisToleranceBefore","toleranceMillisBefore","_x4","pauseAsync","_pauseAsync","stopAsync","_stopAsync","setPositionAsync","_setPositionAsync","_x5","setRateAsync","_setRateAsync","pitchCorrectionQuality","PitchCorrectionQuality","Medium","_x6","setVolumeAsync","_setVolumeAsync","_x7","_x8","setIsMutedAsync","_setIsMutedAsync","_x9","setIsLoopingAsync","_setIsLoopingAsync","_x10","setProgressUpdateIntervalAsync","_setProgressUpdateIntervalAsync","_x11"],"sources":["F:\\node\\vision\\node_modules\\expo-av\\src\\AV.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport {\n  AVPlaybackSource,\n  AVPlaybackNativeSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  PitchCorrectionQuality,\n  AVPlaybackTolerance,\n} from './AV.types';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\n/**\n * @hidden\n */\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\n\n// @needsAudit\n/**\n * The default initial `AVPlaybackStatusToSet` of all `Audio.Sound` objects and `Video` components is as follows:\n *\n * ```javascript\n * {\n *   progressUpdateIntervalMillis: 500,\n *   positionMillis: 0,\n *   shouldPlay: false,\n *   rate: 1.0,\n *   shouldCorrectPitch: false,\n *   volume: 1.0,\n *   isMuted: false,\n *   isLooping: false,\n * }\n * ```\n *\n * This default initial status can be overwritten by setting the optional `initialStatus` in `loadAsync()` or `Audio.Sound.createAsync()`.\n */\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: AVPlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  audioPan: 0,\n  isMuted: false,\n  isLooping: false,\n};\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function getNativeSourceFromSource(\n  source?: AVPlaybackSource | null\n): AVPlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: AVPlaybackNativeSource['headers'];\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  const asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source?: AVPlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function assertStatusValuesInBounds(status: AVPlaybackStatusToSet): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n  if (typeof status.audioPan === 'number' && (status.audioPan < -1 || status.audioPan > 1)) {\n    throw new RangeError('Pan value must be between -1.0 and 1.0');\n  }\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: AVPlaybackSource | null,\n  initialStatus: AVPlaybackStatusToSet | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: AVPlaybackNativeSource;\n  fullInitialStatus: AVPlaybackStatusToSet;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: AVPlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  const asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: AVPlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  // If asset has been downloaded use the localUri\n  if (asset && asset.localUri) {\n    nativeSource.uri = asset.localUri;\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\n// @needsAudit\n/**\n * @hidden\n */\nexport function getUnloadedStatus(error: string | null = null): AVPlaybackStatus {\n  return {\n    isLoaded: false,\n    ...(error ? { error } : null),\n  };\n}\n\n// @needsAudit\nexport interface AV {\n  /**\n   * Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.\n   * @param status The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\n   * or rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.\n   */\n  setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n\n  /**\n   * Gets the `AVPlaybackStatus` of the `playbackObject`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.\n   */\n  getStatusAsync(): Promise<AVPlaybackStatus>;\n}\n\n// @needsAudit\n/**\n * On the `playbackObject` reference, the following API is provided.\n */\nexport interface Playback extends AV {\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true })`.\n   *\n   * Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\n   * on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.\n   */\n  playAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * Loads the media from `source` into memory and prepares it for playing. This must be called before calling `setStatusAsync()`\n   * or any of the convenience set status methods. This method can only be called if the `playbackObject` is in an unloaded state.\n   * @param source The source of the media.\n   * @param initialStatus The initial intended `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the default initial playback status.\n   * This value defaults to `{}` if no parameter is passed. For more information see the details on `AVPlaybackStatusToSet` type\n   * and the default initial playback status.\n   * @param downloadAsync If set to `true`, the system will attempt to download the resource to the device before loading.\n   * This value defaults to `true`. Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is loaded, or rejects if loading failed.\n   * The `Promise` will also reject if the `playbackObject` was already loaded. See below for details on `AVPlaybackStatus`.\n   */\n  loadAsync(\n    source: AVPlaybackSource,\n    initialStatus?: AVPlaybackStatusToSet,\n    downloadAsync?: boolean\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * Unloads the media from memory. `loadAsync()` must be called again in order to be able to play the media.\n   * > This cleanup function will be automatically called in the `Video` component's `componentWillUnmount`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is unloaded, or rejects if unloading failed.\n   */\n  unloadAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true, positionMillis, seekMillisToleranceAfter: tolerances.seekMillisToleranceAfter, seekMillisToleranceBefore: tolerances.seekMillisToleranceBefore })`.\n   *\n   * Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based\n   * on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.\n   * @param positionMillis The desired position of playback in milliseconds.\n   * @param tolerances The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n   */\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false })`.\n   */\n  pauseAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false, positionMillis: 0 })`.\n   */\n  stopAsync(): Promise<AVPlaybackStatus>;\n\n  /**\n   * Replays the playback item. When using `playFromPositionAsync(0)` the item is seeked to the position at `0 ms`.\n   * On iOS this method uses internal implementation of the player and is able to play the item from the beginning immediately.\n   * @param status The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.\n   * `positionMillis` and `shouldPlay` properties will be overridden with respectively `0` and `true`.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully,\n   * or rejects if setting the new status failed.\n   */\n  replayAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ positionMillis })`.\n   * @param positionMillis The desired position of playback in milliseconds.\n   * @param tolerances The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).\n   */\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ rate, shouldCorrectPitch, pitchCorrectionQuality })`.\n   * @param rate The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS.\n   * @param shouldCorrectPitch A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected\n   * (so a rate different than `1.0` will timestretch the audio).\n   * @param pitchCorrectionQuality iOS time pitch algorithm setting, defaults to `Audio.PitchCorrectionQuality.Medium`.\n   * Using `Audio.PitchCorrectionQuality.Low` may cause automatic playback rate changes on iOS >= 17, as AVAudioTimePitchAlgorithmLowQualityZeroLatency is deprecated.\n   */\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ volume, audioPan })`.\n   * Note: `audioPan` is currently only supported on Android using `androidImplementation: 'MediaPlayer'`\n   * @param volume A number between `0.0` (silence) and `1.0` (maximum volume).\n   * @param audioPan A number between `-1.0` (full left) and `1.0` (full right).\n   */\n  setVolumeAsync(volume: number, audioPan?: number): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ isMuted })`.\n   * @param isMuted A boolean describing if the audio of this media should be muted.\n   */\n  setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ isLooping })`.\n   * @param isLooping A boolean describing if the media should play once (`false`) or loop indefinitely (`true`).\n   */\n  setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus>;\n\n  /**\n   * This is equivalent to `playbackObject.setStatusAsync({ progressUpdateIntervalMillis })`.\n   * @param progressUpdateIntervalMillis The new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`.\n   * See `setOnPlaybackStatusUpdate()` for details.\n   */\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<AVPlaybackStatus>;\n}\n\n/**\n * @hidden\n * A mixin that defines common playback methods for A/V classes, so they implement the `Playback`\n * interface.\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: AVPlaybackTolerance = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: AVPlaybackTolerance = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Medium\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number, audioPan?: number): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ volume, audioPan });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n\nexport * from './AV.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}