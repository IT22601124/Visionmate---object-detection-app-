{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nvar _AV = require(\"./AV\");\nvar _ExpoVideoManager = _interopRequireDefault(require(\"./ExpoVideoManager\"));\nvar _ExponentAV = _interopRequireDefault(require(\"./ExponentAV\"));\nvar _ExponentVideo = _interopRequireDefault(require(\"./ExponentVideo\"));\nvar _Video2 = require(\"./Video.types\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"F:\\\\node\\\\vision\\\\node_modules\\\\expo-av\\\\build\\\\Video.js\";\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar _STYLES = _reactNative.StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = _ExpoVideoManager.default;\nvar ExpoVideoViewManager = _ExpoVideoManager.default;\nvar Video = function (_React$Component) {\n  function Video(props) {\n    var _this;\n    (0, _classCallCheck2.default)(this, Video);\n    _this = _callSuper(this, Video, [props]);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n    _this._performOperationAndHandleStatusAsync = function () {\n      var _ref = (0, _asyncToGenerator2.default)(function* (operation) {\n        var video = _this._nativeRef.current;\n        if (!video) {\n          throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n        }\n        var handle = (0, _reactNative.findNodeHandle)(_this._nativeRef.current);\n        var status = yield operation(handle);\n        _this._handleNewStatus(status);\n        return status;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    _this._setFullscreen = function () {\n      var _ref2 = (0, _asyncToGenerator2.default)(function* (value) {\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return ExpoVideoViewManager.setFullscreen(tag, value);\n        });\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this.presentFullscreenPlayer = (0, _asyncToGenerator2.default)(function* () {\n      return _this._setFullscreen(true);\n    });\n    _this.dismissFullscreenPlayer = (0, _asyncToGenerator2.default)(function* () {\n      return _this._setFullscreen(false);\n    });\n    _this.getStatusAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return _ExponentAV.default.getStatusForVideo(tag);\n      });\n    });\n    _this.loadAsync = function () {\n      var _ref6 = (0, _asyncToGenerator2.default)(function* (source) {\n        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var _yield$getNativeSourc = yield (0, _AV.getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst),\n          nativeSource = _yield$getNativeSourc.nativeSource,\n          fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return _ExponentAV.default.loadForVideo(tag, nativeSource, fullInitialStatus);\n        });\n      });\n      return function (_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n    _this.unloadAsync = (0, _asyncToGenerator2.default)(function* () {\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return _ExponentAV.default.unloadForVideo(tag);\n      });\n    });\n    _this.setStatusAsync = function () {\n      var _ref8 = (0, _asyncToGenerator2.default)(function* (status) {\n        (0, _AV.assertStatusValuesInBounds)(status);\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return _ExponentAV.default.setStatusForVideo(tag, status);\n        });\n      });\n      return function (_x4) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n    _this.replayAsync = (0, _asyncToGenerator2.default)(function* () {\n      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return _ExponentAV.default.replayVideo(tag, Object.assign({}, status, {\n          positionMillis: 0,\n          shouldPlay: true\n        }));\n      });\n    });\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n      _this._handleNewStatus((0, _AV.getUnloadedStatus)(error));\n    };\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    _this._renderPoster = function () {\n      var _this$props$PosterCom;\n      var PosterComponent = (_this$props$PosterCom = _this.props.PosterComponent) != null ? _this$props$PosterCom : _reactNative.Image;\n      return _this.props.usePoster && _this.state.showPoster ? (0, _jsxRuntime.jsx)(PosterComponent, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n  (0, _inherits2.default)(Video, _React$Component);\n  return (0, _createClass2.default)(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unloadAsync().catch(function () {});\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var source = (0, _AV.getNativeSourceFromSource)(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n        if (resizeMode === _Video2.ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === _Video2.ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === _Video2.ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n      var status = Object.assign({}, this.props.status);\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n      var nativeProps = Object.assign({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat((0, _toConsumableArray2.default)(Object.keys(status)))), {\n        style: [_STYLES.base, this.props.style],\n        videoStyle: [_STYLES.video, this.props.videoStyle],\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n      return (0, _jsxRuntime.jsxs)(_reactNative.View, {\n        style: nativeProps.style,\n        children: [(0, _jsxRuntime.jsx)(_ExponentVideo.default, Object.assign({\n          ref: this._nativeRef\n        }, nativeProps, {\n          style: nativeProps.videoStyle\n        })), this._renderPoster()]\n      });\n    }\n  }]);\n}(React.Component);\nfunction omit(props, propNames) {\n  var copied = Object.assign({}, props);\n  for (var propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\nObject.assign(Video.prototype, _AV.PlaybackMixin);\nvar _default = exports.default = Video;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_AV","_ExpoVideoManager","_interopRequireDefault","_ExponentAV","_ExponentVideo","_Video2","_jsxRuntime","_jsxFileName","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_callSuper","o","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","_STYLES","StyleSheet","create","base","overflow","pointerEvents","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoManager","ExpoVideoViewManager","Video","_React$Component","props","_this","_classCallCheck2","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_ref","_asyncToGenerator2","operation","current","Error","handle","findNodeHandle","_x","arguments","_setFullscreen","_ref2","value","tag","setFullscreen","_x2","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","ExponentAV","getStatusForVideo","loadAsync","_ref6","source","initialStatus","length","undefined","downloadFirst","_yield$getNativeSourc","getNativeSourceAndFullInitialStatusForLoadAsync","nativeSource","fullInitialStatus","loadForVideo","_x3","unloadAsync","unloadForVideo","setStatusAsync","_ref8","assertStatusValuesInBounds","setStatusForVideo","_x4","replayAsync","replayVideo","assign","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","getUnloadedStatus","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","_this$props$PosterCom","PosterComponent","Image","usePoster","jsx","style","posterStyle","posterSource","_inherits2","_createClass2","key","setNativeProps","nativeProps","nativeVideo","componentWillUnmount","catch","setOnPlaybackStatusUpdate","render","_this2","getNativeSourceFromSource","nativeResizeMode","ScaleNone","ResizeMode","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","concat","_toConsumableArray2","keys","videoStyle","onStatusUpdate","jsxs","View","children","ref","Component","propNames","copied","propName","PlaybackMixin","_default","exports"],"sources":["F:\\node\\vision\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n  PitchCorrectionQuality,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n    pointerEvents: 'box-none',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style}>\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}