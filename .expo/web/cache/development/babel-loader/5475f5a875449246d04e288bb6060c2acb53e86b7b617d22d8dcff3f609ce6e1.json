{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _VelocityTracker = _interopRequireDefault(require(\"./VelocityTracker\"));\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar MAX_POINTERS = 20;\nvar PointerTracker = exports.default = function () {\n  function PointerTracker() {\n    (0, _classCallCheck2.default)(this, PointerTracker);\n    _defineProperty(this, \"velocityTracker\", new _VelocityTracker.default());\n    _defineProperty(this, \"trackedPointers\", new Map());\n    _defineProperty(this, \"touchEventsIds\", new Map());\n    _defineProperty(this, \"lastMovedPointerId\", void 0);\n    _defineProperty(this, \"cachedAbsoluteAverages\", {\n      x: 0,\n      y: 0\n    });\n    _defineProperty(this, \"cachedRelativeAverages\", {\n      x: 0,\n      y: 0\n    });\n    this.lastMovedPointerId = NaN;\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  return (0, _createClass2.default)(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        abosoluteCoords: {\n          x: event.x,\n          y: event.y\n        },\n        relativeCoords: {\n          x: event.offsetX,\n          y: event.offsetY\n        },\n        timestamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n      this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n      if (!element) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      this.velocityTracker.add(event);\n      var _this$velocityTracker = this.velocityTracker.getVelocity(),\n        _this$velocityTracker2 = (0, _slicedToArray2.default)(_this$velocityTracker, 2),\n        velocityX = _this$velocityTracker2[0],\n        velocityY = _this$velocityTracker2[1];\n      element.velocityX = velocityX;\n      element.velocityY = velocityY;\n      element.abosoluteCoords = {\n        x: event.x,\n        y: event.y\n      };\n      element.relativeCoords = {\n        x: event.offsetX,\n        y: event.offsetY\n      };\n      this.trackedPointers.set(event.pointerId, element);\n      this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n      this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _ref of this.touchEventsIds) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _ref3 of this.touchEventsIds.entries()) {\n        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n        var key = _ref4[0];\n        var value = _ref4[1];\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n      return NaN;\n    }\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity(pointerId) {\n      var _this$trackedPointers, _this$trackedPointers2;\n      return {\n        x: (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX,\n        y: (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY\n      };\n    }\n  }, {\n    key: \"getLastAbsoluteCoords\",\n    value: function getLastAbsoluteCoords(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers3, _this$trackedPointers4;\n        return {\n          x: (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.abosoluteCoords.x,\n          y: (_this$trackedPointers4 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.abosoluteCoords.y\n        };\n      } else {\n        var _this$trackedPointers5, _this$trackedPointers6;\n        return {\n          x: (_this$trackedPointers5 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.abosoluteCoords.x,\n          y: (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.abosoluteCoords.y\n        };\n      }\n    }\n  }, {\n    key: \"getLastRelativeCoords\",\n    value: function getLastRelativeCoords(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers7, _this$trackedPointers8;\n        return {\n          x: (_this$trackedPointers7 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers7 === void 0 ? void 0 : _this$trackedPointers7.relativeCoords.x,\n          y: (_this$trackedPointers8 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers8 === void 0 ? void 0 : _this$trackedPointers8.relativeCoords.y\n        };\n      } else {\n        var _this$trackedPointers9, _this$trackedPointers10;\n        return {\n          x: (_this$trackedPointers9 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers9 === void 0 ? void 0 : _this$trackedPointers9.relativeCoords.x,\n          y: (_this$trackedPointers10 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers10 === void 0 ? void 0 : _this$trackedPointers10.relativeCoords.y\n        };\n      }\n    }\n  }, {\n    key: \"getAbsoluteCoordsAverage\",\n    value: function getAbsoluteCoordsAverage() {\n      var coordsSum = this.getAbsoluteCoordsSum();\n      var avgX = coordsSum.x / this.trackedPointers.size;\n      var avgY = coordsSum.y / this.trackedPointers.size;\n      var averages = {\n        x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n        y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY\n      };\n      return averages;\n    }\n  }, {\n    key: \"getRelativeCoordsAverage\",\n    value: function getRelativeCoordsAverage() {\n      var coordsSum = this.getRelativeCoordsSum();\n      var avgX = coordsSum.x / this.trackedPointers.size;\n      var avgY = coordsSum.y / this.trackedPointers.size;\n      var averages = {\n        x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n        y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY\n      };\n      return averages;\n    }\n  }, {\n    key: \"getAbsoluteCoordsSum\",\n    value: function getAbsoluteCoordsSum(ignoredPointer) {\n      var sum = {\n        x: 0,\n        y: 0\n      };\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sum.x += value.abosoluteCoords.x;\n          sum.y += value.abosoluteCoords.y;\n        }\n      });\n      return sum;\n    }\n  }, {\n    key: \"getRelativeCoordsSum\",\n    value: function getRelativeCoordsSum(ignoredPointer) {\n      var sum = {\n        x: 0,\n        y: 0\n      };\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sum.x += value.relativeCoords.x;\n          sum.y += value.relativeCoords.y;\n        }\n      });\n      return sum;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.velocityTracker.reset();\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n}();","map":{"version":3,"names":["_VelocityTracker","_interopRequireDefault","require","MAX_POINTERS","PointerTracker","exports","default","_classCallCheck2","_defineProperty","VelocityTracker","Map","x","y","lastMovedPointerId","NaN","i","touchEventsIds","set","_createClass2","key","value","addToTracker","event","trackedPointers","has","pointerId","newElement","abosoluteCoords","relativeCoords","offsetX","offsetY","timestamp","time","velocityX","velocityY","mapTouchEventId","cachedAbsoluteAverages","getAbsoluteCoordsAverage","cachedRelativeAverages","getRelativeCoordsAverage","removeFromTracker","delete","removeMappedTouchId","track","element","get","velocityTracker","add","_this$velocityTracker","getVelocity","_this$velocityTracker2","_slicedToArray2","id","_ref","_ref2","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","_ref3","entries","_ref4","_this$trackedPointers","_this$trackedPointers2","getLastAbsoluteCoords","undefined","_this$trackedPointers3","_this$trackedPointers4","_this$trackedPointers5","_this$trackedPointers6","getLastRelativeCoords","_this$trackedPointers7","_this$trackedPointers8","_this$trackedPointers9","_this$trackedPointers10","coordsSum","getAbsoluteCoordsSum","avgX","size","avgY","averages","getRelativeCoordsSum","ignoredPointer","sum","forEach","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes"],"sources":["F:\\node\\vision\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent, Point } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  abosoluteCoords: Point;\n  relativeCoords: Point;\n  timestamp: number;\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAbsoluteAverages: { x: number; y: number } = { x: 0, y: 0 };\n  private cachedRelativeAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      abosoluteCoords: { x: event.x, y: event.y },\n      relativeCoords: { x: event.offsetX, y: event.offsetY },\n      timestamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.abosoluteCoords = { x: event.x, y: event.y };\n    element.relativeCoords = { x: event.offsetX, y: event.offsetY };\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  // Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocity(pointerId: number) {\n    return {\n      x: this.trackedPointers.get(pointerId)?.velocityX as number,\n      y: this.trackedPointers.get(pointerId)?.velocityY as number,\n    };\n  }\n\n  public getLastAbsoluteCoords(pointerId?: number) {\n    if (pointerId !== undefined) {\n      return {\n        x: this.trackedPointers.get(pointerId)?.abosoluteCoords.x as number,\n        y: this.trackedPointers.get(pointerId)?.abosoluteCoords.y as number,\n      };\n    } else {\n      return {\n        x: this.trackedPointers.get(this.lastMovedPointerId)?.abosoluteCoords\n          .x as number,\n        y: this.trackedPointers.get(this.lastMovedPointerId)?.abosoluteCoords\n          .y as number,\n      };\n    }\n  }\n\n  public getLastRelativeCoords(pointerId?: number) {\n    if (pointerId !== undefined) {\n      return {\n        x: this.trackedPointers.get(pointerId)?.relativeCoords.x as number,\n        y: this.trackedPointers.get(pointerId)?.relativeCoords.y as number,\n      };\n    } else {\n      return {\n        x: this.trackedPointers.get(this.lastMovedPointerId)?.relativeCoords\n          .x as number,\n        y: this.trackedPointers.get(this.lastMovedPointerId)?.relativeCoords\n          .y as number,\n      };\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n\n  public getAbsoluteCoordsAverage() {\n    const coordsSum = this.getAbsoluteCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getRelativeCoordsAverage() {\n    const coordsSum = this.getRelativeCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getAbsoluteCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.abosoluteCoords.x;\n        sum.y += value.abosoluteCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getRelativeCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.relativeCoords.x;\n        sum.y += value.relativeCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}