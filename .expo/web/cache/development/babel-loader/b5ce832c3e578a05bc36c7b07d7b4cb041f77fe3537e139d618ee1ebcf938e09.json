{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  useCameraPermissions: true,\n  useMicrophonePermissions: true,\n  scanFromURLAsync: true,\n  Camera: true,\n  CameraView: true\n};\nexports.Camera = void 0;\nObject.defineProperty(exports, \"CameraView\", {\n  enumerable: true,\n  get: function get() {\n    return _CameraView.default;\n  }\n});\nexports.scanFromURLAsync = scanFromURLAsync;\nexports.useMicrophonePermissions = exports.useCameraPermissions = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ExpoCameraManager = _interopRequireDefault(require(\"./ExpoCameraManager\"));\nvar _CameraView = _interopRequireDefault(require(\"./CameraView\"));\nvar _Camera = require(\"./Camera.types\");\nObject.keys(_Camera).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _Camera[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Camera[key];\n    }\n  });\n});\nfunction getCameraPermissionsAsync() {\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _getCameraPermissionsAsync() {\n  _getCameraPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n    return _ExpoCameraManager.default.getCameraPermissionsAsync();\n  });\n  return _getCameraPermissionsAsync.apply(this, arguments);\n}\nfunction requestCameraPermissionsAsync() {\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nfunction _requestCameraPermissionsAsync() {\n  _requestCameraPermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n    return _ExpoCameraManager.default.requestCameraPermissionsAsync();\n  });\n  return _requestCameraPermissionsAsync.apply(this, arguments);\n}\nvar useCameraPermissions = exports.useCameraPermissions = (0, _expoModulesCore.createPermissionHook)({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync\n});\nfunction getMicrophonePermissionsAsync() {\n  return _getMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction _getMicrophonePermissionsAsync() {\n  _getMicrophonePermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n    return _ExpoCameraManager.default.getMicrophonePermissionsAsync();\n  });\n  return _getMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction requestMicrophonePermissionsAsync() {\n  return _requestMicrophonePermissionsAsync.apply(this, arguments);\n}\nfunction _requestMicrophonePermissionsAsync() {\n  _requestMicrophonePermissionsAsync = (0, _asyncToGenerator2.default)(function* () {\n    return _ExpoCameraManager.default.requestMicrophonePermissionsAsync();\n  });\n  return _requestMicrophonePermissionsAsync.apply(this, arguments);\n}\nvar useMicrophonePermissions = exports.useMicrophonePermissions = (0, _expoModulesCore.createPermissionHook)({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync\n});\nfunction scanFromURLAsync(_x) {\n  return _scanFromURLAsync.apply(this, arguments);\n}\nfunction _scanFromURLAsync() {\n  _scanFromURLAsync = (0, _asyncToGenerator2.default)(function* (url) {\n    var barcodeTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['qr'];\n    return _ExpoCameraManager.default.scanFromURLAsync(url, barcodeTypes);\n  });\n  return _scanFromURLAsync.apply(this, arguments);\n}\nvar Camera = exports.Camera = {\n  getCameraPermissionsAsync: getCameraPermissionsAsync,\n  requestCameraPermissionsAsync: requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync: getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync: requestMicrophonePermissionsAsync,\n  scanFromURLAsync: scanFromURLAsync\n};","map":{"version":3,"names":["_expoModulesCore","require","_ExpoCameraManager","_interopRequireDefault","_CameraView","_Camera","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","getCameraPermissionsAsync","_getCameraPermissionsAsync","apply","arguments","_asyncToGenerator2","default","CameraManager","requestCameraPermissionsAsync","_requestCameraPermissionsAsync","useCameraPermissions","createPermissionHook","getMethod","requestMethod","getMicrophonePermissionsAsync","_getMicrophonePermissionsAsync","requestMicrophonePermissionsAsync","_requestMicrophonePermissionsAsync","useMicrophonePermissions","scanFromURLAsync","_x","_scanFromURLAsync","url","barcodeTypes","length","undefined","Camera"],"sources":["F:\\node\\vision\\node_modules\\expo-camera\\src\\index.ts"],"sourcesContent":["import { createPermissionHook } from 'expo-modules-core';\n\nimport { BarcodeScanningResult, BarcodeType } from './Camera.types';\nimport CameraManager from './ExpoCameraManager';\nimport { PermissionResponse } from './legacy/Camera.types';\n\nexport { default as CameraView } from './CameraView';\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera.\n * On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestCameraPermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing microphone.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function getMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.getMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing the microphone.\n * On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the **Info.plist**.\n * @return A promise that resolves to an object of type [PermissionResponse](#permissionresponse).\n */\nasync function requestMicrophonePermissionsAsync(): Promise<PermissionResponse> {\n  return CameraManager.requestMicrophonePermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the microphone.\n * This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Camera.useMicrophonePermissions();\n * ```\n */\nexport const useMicrophonePermissions = createPermissionHook({\n  getMethod: getMicrophonePermissionsAsync,\n  requestMethod: requestMicrophonePermissionsAsync,\n});\n\n/**\n * Scan bar codes from the image at the given URL.\n * @param url URL to get the image from.\n * @param barcodeTypes An array of bar code types. Defaults to all supported bar code types on\n * the platform.\n * > __Note:__ Only QR codes are supported on iOS.\n * On android, the barcode should take up the majority of the image for best results.\n * @return A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type\n * refers to the barcode type that was scanned and the data is the information encoded in the barcode.\n */\nexport async function scanFromURLAsync(\n  url: string,\n  barcodeTypes: BarcodeType[] = ['qr']\n): Promise<BarcodeScanningResult[]> {\n  return CameraManager.scanFromURLAsync(url, barcodeTypes);\n}\n\nexport * from './Camera.types';\n\n/**\n * @hidden\n */\nexport const Camera = {\n  getCameraPermissionsAsync,\n  requestCameraPermissionsAsync,\n  getMicrophonePermissionsAsync,\n  requestMicrophonePermissionsAsync,\n  scanFromURLAsync,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}