{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAnimatedProps = void 0;\nvar _useAnimatedStyle = require(\"./useAnimatedStyle\");\nvar _PlatformChecker = require(\"../PlatformChecker\");\nfunction useAnimatedPropsJS(updater, deps, adapters) {\n  return (0, _useAnimatedStyle.useAnimatedStyle)(updater, deps, adapters, true);\n}\nvar useAnimatedPropsNative = _useAnimatedStyle.useAnimatedStyle;\nvar useAnimatedProps = exports.useAnimatedProps = (0, _PlatformChecker.shouldBeUseWeb)() ? useAnimatedPropsJS : useAnimatedPropsNative;","map":{"version":3,"names":["Object","defineProperty","exports","value","useAnimatedProps","_useAnimatedStyle","require","_PlatformChecker","useAnimatedPropsJS","updater","deps","adapters","useAnimatedStyle","useAnimatedPropsNative","shouldBeUseWeb"],"sources":["F:\\node\\vision\\node_modules\\react-native-reanimated\\lib\\module\\hook\\useAnimatedProps.ts"],"sourcesContent":["'use strict';\nimport { useAnimatedStyle } from './useAnimatedStyle';\nimport type { DependencyList, UseAnimatedStyleInternal } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\nimport type { AnimatedPropsAdapterFunction } from '../commonTypes';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n\ntype UseAnimatedProps = <Props extends object>(\n  updater: () => Partial<Props>,\n  dependencies?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null,\n  isAnimatedProps?: boolean\n) => Partial<Props>;\n\nfunction useAnimatedPropsJS<Props extends object>(\n  updater: () => Props,\n  deps?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null\n) {\n  return (useAnimatedStyle as UseAnimatedStyleInternal<Props>)(\n    updater,\n    deps,\n    adapters,\n    true\n  );\n}\n\nconst useAnimatedPropsNative = useAnimatedStyle;\n\n/**\n * Lets you create an animated props object which can be animated using shared values.\n *\n * @param updater - A function returning an object with properties you want to animate.\n * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.\n * @param adapters - An optional function or array of functions allowing to adopt prop naming between JS and the native side.\n * @returns An animated props object which has to be passed to `animatedProps` property of an Animated component that you want to animate.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps\n */\nexport const useAnimatedProps: UseAnimatedProps = shouldBeUseWeb()\n  ? (useAnimatedPropsJS as UseAnimatedProps)\n  : useAnimatedPropsNative;\n"],"mappings":"AAAA,YAAY;;AAAAA,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,gBAAA;AACZ,IAAAC,iBAAA,GAAAC,OAAA;AAEA,IAAAC,gBAAA,GAAAD,OAAA;AAeA,SAASE,kBAAkBA,CACzBC,OAAoB,EACpBC,IAA4B,EAC5BC,QAGQ,EACR;EACA,OAAQ,IAAAC,kCAAgB,EACtBH,OAAO,EACPC,IAAI,EACJC,QAAQ,EACR,IACF,CAAC;AACH;AAEA,IAAME,sBAAsB,GAAGD,kCAAgB;AAWxC,IAAMR,gBAAkC,GAAAF,OAAA,CAAAE,gBAAA,GAAG,IAAAU,+BAAc,EAAC,CAAC,GAC7DN,kBAAkB,GACnBK,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}